OutputFileIndex = NULL,
control = list(AlleleOrder = "ref-first", AllMarkers=T))
GRAB.WtCoxG(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi", "simuBGEN1.sample"),
obj.WtCoxG = obj.WtCoxG,
OutputFile = "simuBGEN1.txt",
control = list(AlleleOrder = "ref-first", AllMarkers=T))
OutputFile = "simuBGEN1.txt"
re=fread("simuBGEN1.txt")
head(re)
head(re%>%arrange(WtCoxG.ext))
dim(re)
mean(na.omit(re$WtCoxG.ext<5e-4))
mean(na.omit(re$WtCoxG.ext<5e-5))
mean(na.omit(re$WtCoxG.noext<5e-5))
sum(na.omit(re$WtCoxG.ext<5e-5))
sum(na.omit(re$WtCoxG.noext<5e-5))
sum(na.omit(re$WtCoxG.ext<5e-3))
mean(na.omit(re$WtCoxG.ext<5e-3))
?mergeQCresults
?QCforBatchEffect
library(GRAB)
library(GRAB)
?QCforBatchEffect
?GRAB.WtCoxG
library(GRAB)
?QCforBatchEffect
?GRAB.WtCoxG
GRAB::QCforBatchEffect()
GRAB::QCforBatchEffect
?GRAB::GRAB.WtCoxG
GRAB::GRAB.WtCoxG
library(GRAB)
GRAB::GRAB.WtCoxG
?GRAB::GRAB.WtCoxG
?GRAB::QCforBatchEffect
?GRAB.Marker
?GRAB.WtSPAG
?devtools::document()
?devtools::document("GRAB")
devtools::document("GRAB")
rlang::last_trace()
devtools::document("D:/Github/GRAB")
devtools::document("D:/Github/GRAB")
library(GRAB)
?QCforBatchEffect
?GRAB.WtCoxG
?roxygen2::roxygenize()
?roxygen2::roxygenize("D:/R-4.3.0/library/GRAB")
roxygen2::roxygenize("D:/R-4.3.0/library/GRAB")
setwd(system.file("WtSPAG", package = "GRAB"))
PhenoData = read.table(system.file("WtSPAG", "simuPHENO_WtSPAG.txt", package = "GRAB"), header = T)
RefPrevalence = 0.1
#' Quality control to check batch effect between study cohort and reference population.
#'
#' This function performs quality control to check the batch effect between a study cohort and a reference population.
#'
#' @param GenoFile A character string of the genotype file. See Details section for more details.
#' @param GenoFileIndex Additional index file(s) corresponding to GenoFile. See Details section for more details.
#' @param PhenoData A dataframe that must have at least two columns: \code{SampleID} holds the personal identifiers for all individuals, and \code{Indicator} holds whether the event occurred (0 or 1 or NA).
#' @param RefAFfile A character string of the reference file. The reference file must be a \code{txt} file (header required) including at least 7 columns: \code{CHROM}, \code{POS}, \code{ID}, \code{REF}, \code{ALT}, \code{AF_ref}, \code{AN_ref}.
#' @param RefPrev A numeric value of the event rate in the population.
#' @param SNPnum An integer specifying the minimum number of markers. The default is 1e4.
#' @param control A list of parameters to decide which markers to extract. See \code{Details} section for more details.
#' @param GRM A matrix of genetic relatedness. Default is NULL.
#' @return An R object with a class of "QCforBatchEffect".
#' \itemize{
#'   \item{mergeGenoInfo}: A dataframe of marker info and reference MAF.
#'   \item{cutoff}: A numeric, the cut-off of batch effect.
#'   \item{count}: A dataframe of the frequency of the batch effect p-value.
#'   \item{PhenoData}: A dataframe of the input PhenoData.
#'   \item{control}: A list of parameters to decide which markers to extract.
#' }
#'
#' @export
#' @import dplyr, data.table
#'
#' @examples
#' setwd(system.file("WtSPAG", package = "GRAB"))
#' PhenoData = read.table(system.file("WtSPAG", "simuPHENO_WtSPAG.txt", package = "GRAB"), header = T)
#' RefPrevalence = 0.1
#'
#' obj.WtCoxG = QCforBatchEffect(GenoFile = "simuBGEN1.bgen",
#'                              GenoFileIndex = c("simuBGEN1.bgen.bgi",
#'                                                 "simuBGEN1.sample"),
#'                              OutputFile = "qcBGEN1.txt",
#'                              control=list(AlleleOrder = "ref-first",
#'                                           AllMarkers = T,
#'                                           IndicatorColumn = "SurvEvent", SampleIDColumn = "IID"),
#'                              PhenoData=PhenoData,
#'                              RefAfFile = "RefMAFs.txt",
#'                              RefPrevalence = RefPrevalence,
#'                              SNPnum=1e4)
#' names(obj.WtCoxG)
QCforBatchEffect = function(GenoFile               # a character of file names of genotype files
,GenoFileIndex = NULL  # additional index file(s) corresponding to GenoFile
,OutputFile
,control=list(AlleleOrder = "ref-first")
,PhenoData             # an R data frame with at least two columns, headers are required and should include c("SampleID", "Indicator"), the "Indicator" column should be 0, 1, or NA.
,RefAfFile             # a character of file name of refInfo, which including at least 7 columns, header are required and should include c("CHROM", "POS", "ID", "REF", "ALT", "AF_ref","AN_ref")
,RefPrevalence         # refernce population prevalence, the proportion of indicator == 1.
,SNPnum=1e4            # default least number of SNPs is 1e4
,GRM = NULL               # genotype relatedness matrix
){
if(is.null(OutputFile))
stop("Argument of 'OutputFile' is required to store information for the follow-up analysis.")
# check if there are c("Indicator", "SampleID") in PhenoData-------------------
if(!is.null(control$IndicatorColumn))
{
if(!control$IndicatorColumn %in% colnames(PhenoData))
stop(paste0("Cannot find a column of '",
control$IndicatorColumn,
"' (i.e. control$IndicatorColumn) in colnames(PhenoData)"))
posCol = which(colnames(PhenoData) == control$IndicatorColumn)
colnames(PhenoData)[posCol] = "Indicator"
}
if(!is.null(control$SampleIDColumn))
{
if(!control$SampleIDColumn %in% colnames(PhenoData))
stop(paste0("Cannot find a column of '",
control$IndicatorColumn,
"' (i.e. control$SampleIDColumn) in colnames(PhenoData)"))
posCol = which(colnames(PhenoData) == control$SampleIDColumn)
colnames(PhenoData)[posCol] = "SampleID"
}
if(!"Indicator" %in% colnames(PhenoData))
stop("The column of 'Indicator' is required in PhenoData!")
if(any(!unique(PhenoData$Indicator) %in% c(0,1,NA)))
stop("The value of Indicator should be 0,1 or NA")
if(!"SampleID" %in% colnames(PhenoData))
stop("The column of 'SampleID' is required in PhenoData!")
if(!is.null(GRM)){
if(nrow(GRM)!=nrow(PhenoData) | ncol(GRM)!=nrow(PhenoData)){
stop(paste0("The dimension of the GRM should be ",nrow(PhenoData)," Ã— ",nrow(PhenoData)))
}
}
#step1: quality control--------------------------------------------------------
suppressPackageStartupMessages(library("GRAB",quietly = T))
suppressPackageStartupMessages(library("data.table",quietly = T))
suppressPackageStartupMessages(library("dplyr",quietly = T))
suppressPackageStartupMessages(library("mvtnorm",quietly = T))
## reference genoInfo----------------------------------------------------------
refGenoInfo = fread(RefAfFile)%>%as_tibble()
# check if there are 7 columns in RefAfFile
for(colname in c("CHROM", "POS", "ID", "REF", "ALT", "AF_ref","AN_ref")){
if(!colname %in% colnames(refGenoInfo)){
stop( paste0(colname, " is missing in RefAfFile!") )}
}
## merge sample genoInfo and ref genoInfo--------------------------------------
GenoInfo.ctrl = GRAB.getGenoInfo(GenoFile = GenoFile
,GenoFileIndex = GenoFileIndex
,SampleIDs = with(PhenoData,SampleID[Indicator==0]) # MAF in cases
,control = control) %>%
rename(mu0 = altFreq, mr0 = missingRate ) %>%
select(mu0, mr0)
if(nrow(GenoInfo.ctrl)<SNPnum)
stop("The number of genetic variants < ",SNPnum)
GenoInfo = GRAB.getGenoInfo(GenoFile = GenoFile
,GenoFileIndex = GenoFileIndex
,SampleIDs = with(PhenoData,SampleID[Indicator==1]) # MAF in controls
,control = control) %>%
rename(mu1 = altFreq, mr1 = missingRate) %>%
cbind(., GenoInfo.ctrl) %>% as_tibble() %>%
mutate(RA = ifelse(REF < ALT, paste0(REF, ALT), paste0(ALT, REF))) %>%
mutate(index = 1:n())
mergeGenoInfo = refGenoInfo %>%
mutate(RA = ifelse(REF < ALT, paste0(REF, ALT), paste0(ALT, REF))) %>%
merge(., GenoInfo, by=c("CHROM", "POS", "RA"), all.y=T) %>%
rename(REF = REF.y, ALT = ALT.y, ID = ID.y)%>%
mutate(AF_ref = ifelse(REF == REF.x, AF_ref, 1-AF_ref  ))%>%
select(-REF.x, -ALT.x, -ID.x, -RA) %>%
arrange( index )%>%
select( -index )%>%
mutate( n1=sum(PhenoData$Indicator) * (1 - mr1),
n0=sum(1 - PhenoData$Indicator) * (1 - mr0) )
####fit null model-------------------------------------------------------------------
obj.WtSPAG = GRAB.NullModel(Surv(SurvTime, Indicator) ~ Cov1 + Cov2,
data = PhenoData,
subjData = SampleID,
method = "WtSPAG",
traitType = "time-to-event",
control = list(RefPrevalence = RefPrevalence))
PhenoData = PhenoData %>%
mutate(R = obj.WtSPAG$mresid,
weight = obj.WtSPAG$weight)
####calculate batch effect p-value for each genetic variant------------------------------------
w1 = PhenoData$weight/(2*sum(PhenoData$weight))
R_tilde = PhenoData$R - mean( PhenoData$R)
meanR = mean( PhenoData$R)
if(!is.null(GRM)){
var.ratio.w0 = (t(w1) %*% GRM %*% w1 + 1/(2*mergeGenoInfo$AN_ref))/(sum(w1^2) + 1/(2*mergeGenoInfo$AN_ref))
var.ratio.int = (t(R_tilde) %*% GRM %*% R_tilde)/sum(R_tilde^2)
}else{var.ratio.w0 = var.ratio.int=1}
mergeGenoInfo = mergeGenoInfo %>%
mutate(var.ratio.w0 = var.ratio.w0,
var.ratio.int=var.ratio.int)
pvalue_bat = lapply(1: nrow(mergeGenoInfo), function(ind){
p.test = Batcheffect.Test(n0 = mergeGenoInfo$n0[ind],
n1 = mergeGenoInfo$n1[ind],
n.ext = mergeGenoInfo$AN_ref[ind]/2,
maf0 = mergeGenoInfo$mu0[ind],
maf1 = mergeGenoInfo$mu1[ind] ,
maf.ext = mergeGenoInfo$AF_ref[ind],
pop.prev = RefPrevalence,
var.ratio = mergeGenoInfo$var.ratio.w0[ind])
})%>%unlist()
mergeGenoInfo = mergeGenoInfo %>% mutate(pvalue_bat)
####estimate unknown parameters according to batch effect p-values---------------------------------
mergeGenoInfo = mergeGenoInfo %>% mutate(mu.int = (mu0 + mu1)/2,
mu.int = ifelse(mu.int > 0.5, 1 - mu.int, mu.int),
index = 1:n())
cat("estimate TPR and sigma2--------------\n")
maf.group = c(seq(0, 0.4, 0.05),max(mergeGenoInfo$mu.int))
mergeGenoInfo =lapply(1:(length(maf.group)-1), function(i){
cat(i,"\n")
##assume that genotypes with MAF in [ maf.group[i] , maf.group[i+1]] have the same mixture distribution
data = mergeGenoInfo %>% filter(mu.int > maf.group[i] & mu.int <= maf.group[i+1] )
##using batcheffect p-values with MAF in [maf.group[i]-0.1 , maf.group[i+1]+0.1] to estimate parameters
data.ref = mergeGenoInfo %>%
filter(mu.int >= max(maf.group[i]-0.1,0) & mu.int < min(1,maf.group[i+1]+0.1) )
mu = (maf.group[i]+maf.group[i+1])/2
n.ext = mean(na.omit(data$AN_ref)[1])/2
var_mu_ext = mu*(1-mu)/(2*n.ext)
var_Sbat = ifelse(is.null(GRM), sum(w1^2)*2*mu*(1-mu) + var_mu_ext,
t(w1) %*% GRM %*% w1*2*mu*(1-mu) + var_mu_ext)
obj = fun.est.param(vec_p_bat=data.ref$pvalue_bat ,
vec_var_Sbat=var_Sbat)
TPR = obj[1]
sigma2 = obj[2]
w.ext = optim(par = 0.5, method = "L-BFGS-B", lower = 0, upper = 1
, fn = fun.optimalWeight
, pop.prev = RefPrevalence
, y = PhenoData$Indicator
, R = PhenoData$R
, w = PhenoData$weight
, mu = mu
, N = nrow(PhenoData)
, n.ext = n.ext
, sigma2 = obj$sigma2
, TPR = obj$TPR
)$par[1]
data=data%>%cbind(.,TPR, sigma2, w.ext)
})%>%
do.call("rbind",.) %>%
as_tibble() %>%
arrange(index) %>%
select(-index)
data.table::fwrite(mergeGenoInfo,
OutputFile,
row.names = F, col.names = T, quote = F, sep = "\t")
#### output-----------------------------------------------------------
return(list(mergeGenoInfo=mergeGenoInfo,
PhenoData = PhenoData,
RefPrevalence = RefPrevalence,
control = control))
}
## function to test for batch effect
Batcheffect.Test = function(n0,         # number of controls
n1,         # number of cases
n.ext,         # number of external dataset
maf0,         # estimated MAF in controls
maf1,         # estimated MAF in cases
maf.ext,         # estimated MAF in external dataset
pop.prev,
var.ratio=1)
{
er = n1/(n1+n0)
w0 = (1-pop.prev)/pop.prev/((1-er)/er)
w1 = 1
weight.maf = sum(maf0*w0*n0 + maf1*w1*n1) / sum(w0*n0 + w1*n1)                           ## weighted mean of genotypes
est.maf = sum(maf0*w0*n0 + maf1*w1*n1 + maf.ext*n.ext*w0) / sum(n1*w1+n0*w0+ n.ext*w0)   ## MAF estimates
v =( (n1*w1^2+n0*w0^2)/(2*(n1*w1+n0*w0)^2)  + 1/(2*n.ext) ) * est.maf * (1-est.maf) ## variance of test statistics
z = (weight.maf - maf.ext) / sqrt(v)  ## standardized statistics
z.adj = z/sqrt(var.ratio)             ## adjusted statistics by variance ratio
p = 2*pnorm(-abs(z.adj), lower.tail=TRUE)
return(p)
}
#####estimate TPR and sigma2----------------------------------------------------
fun.est.param = function(vec_p_bat,
vec_var_Sbat,
vec_cutoff=seq(0.01,0.4,0.1)
){
########  step1: the propportion of p_bat>cutoff
vec_p_deno=lapply(vec_cutoff,function(p_cut){
p_deno=mean(na.omit(vec_p_bat>p_cut))
})%>%unlist()
######## optimization function
opti_fun = function( var_Sbat,vec_p_deno,par ){
diff=lapply(1: length(vec_cutoff),function(j){
p_cut=vec_cutoff[j]
lb = -qnorm(1-p_cut/2) * sqrt(var_Sbat)
ub = qnorm(1-p_cut/2) *sqrt(var_Sbat)
p_deno=vec_p_deno[j]
c = pnorm(ub, 0, sqrt(var_Sbat+par[2]), log.p = T)
d = pnorm(lb, 0, sqrt(var_Sbat+par[2]), log.p = T)
pro.cut = par[1]*( exp(d) * (exp(c-d) - 1) )+(1-par[1])*(1-p_cut)
t = ((p_deno - pro.cut)/p_deno)^2
})%>%do.call("sum",.)
return(diff)
}
#######estimate TPR and sigma2 for each SNP
var.diff = lapply(1:length(vec_var_Sbat), function(i){
if(i%%100==0)cat(i,"\n")
obj = optim(par = c(0.01, 0.01)
#,method = "SANN"
#, lower = 0, upper = 1
, fn = opti_fun,
vec_p_deno=vec_p_deno,
var_Sbat=vec_var_Sbat[i])
TPR = min(1,max(0,obj$par[1]))
sigma2 = min(1,max(0,obj$par[2]))
return(cbind(TPR, sigma2))
})%>%
do.call("rbind",.)%>%as_tibble()
return(var.diff)
}
###### optimal weight for mu_ext -----------------------------------------------
fun.optimalWeight = function(par, pop.prev, R, y, mu1, w , mu, N, n.ext, sigma2, TPR){
b=par[1]
p.fun= function(b,pop.prev, R, y, mu1, mu, w, N, n.ext, sigma2, TPR){
meanR= mean(R)
sumR = sum(R)
mu0 = mu
mu.pop = mu1*pop.prev+mu0*(1-pop.prev)
mu.i = ifelse(y==1, 2*mu1, 2*mu0)
S = sum((R-(1-b)*meanR)*mu.i)-sumR*2*b*mu.pop
w1 = w/(2*sum(w))
mu = mean(mu.i)/2
var_mu_ext = mu*(1-mu)/(2*n.ext)
var_Sbat = sum(w1^2)*2*mu*(1-mu) + var_mu_ext
p_cut=0.1
lb = -qnorm(1-p_cut/2) * sqrt(var_Sbat)
ub = qnorm(1-p_cut/2) *sqrt(var_Sbat)
c = pnorm(ub, 0, sqrt(var_Sbat+sigma2),log.p = T)
d = pnorm(lb, 0, sqrt(var_Sbat+sigma2),log.p = T)
p_deno = TPR*( exp(d) * (exp(c-d) - 1) )+(1-TPR)*(1-p_cut)
##sigma2=0
var.int = sum((R-(1-b)*meanR)^2)*2*mu*(1-mu)
var_S = var.int +  4*b^2 *sumR^2* var_mu_ext
cov_Sbat_S = sum(w1*(R-(1-b)*meanR))*2*mu*(1-mu)+2*b*sumR*var_mu_ext
VAR = matrix(c(var_S, cov_Sbat_S, cov_Sbat_S, var_Sbat),nrow=2)
p0 = max(0,pmvnorm(lower=c( -Inf, lb),upper=c( -abs(S), ub), mean=c(0,0), sigma=VAR))
##sigma2!=0
var_S1 = var.int +  4*b^2 *sumR^2* (var_mu_ext+sigma2)
cov_Sbat_S1 = sum(w1*(R-(1-b)*meanR))*2*mu*(1-mu)+2*b*sumR*(var_mu_ext+sigma2)
var_Sbat1 = var_Sbat+sigma2
VAR1 = matrix(c(var_S1, cov_Sbat_S1, cov_Sbat_S1, var_Sbat1),nrow=2)
p1=max(0,pmvnorm(lower=c( -Inf, lb),upper=c( -abs(S), ub), mean=c(0,0), sigma=VAR1))
p.con = 2*(TPR*p1+(1-TPR)*p0)/p_deno
#diff = -log10(p.con)+log10(5e-8)
diff = -log10(p.con/5e-8)
return(diff)
}
mu1=uniroot(p.fun, lower=mu,upper=1
, b=b, pop.prev=pop.prev,mu=mu,
R=R, y=y, w=w,N=N, n.ext=n.ext,sigma2=sigma2,TPR=TPR)$root
return(mu1)
}
setwd(system.file("WtSPAG", package = "GRAB"))
PhenoData = read.table(system.file("WtSPAG", "simuPHENO_WtSPAG.txt", package = "GRAB"), header = T)
RefPrevalence = 0.1
obj.WtCoxG = QCforBatchEffect(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi",
"simuBGEN1.sample"),
OutputFile = "qcBGEN1.txt",
control=list(AlleleOrder = "ref-first",
AllMarkers = T,
IndicatorColumn = "SurvEvent", SampleIDColumn = "IID"),
PhenoData=PhenoData,
RefAfFile = "RefMAFs.txt",
RefPrevalence = RefPrevalence,
SNPnum=1e4)
library(GRAB)
obj.WtCoxG = QCforBatchEffect(GenoFile = "simuBGEN1.bgen",
GenoFileIndex = c("simuBGEN1.bgen.bgi",
"simuBGEN1.sample"),
OutputFile = "qcBGEN1.txt",
control=list(AlleleOrder = "ref-first",
AllMarkers = T,
IndicatorColumn = "SurvEvent", SampleIDColumn = "IID"),
PhenoData=PhenoData,
RefAfFile = "RefMAFs.txt",
RefPrevalence = RefPrevalence,
SNPnum=1e4)
?GRAB.getGenoInfo
GenoFile = "simuBGEN1.bgen"
GenoFileIndex = c("simuBGEN1.bgen.bgi",
"simuBGEN1.sample")
OutputFile = "qcBGEN1.txt"
control=list(AlleleOrder = "ref-first",
AllMarkers = T,
IndicatorColumn = "SurvEvent", SampleIDColumn = "IID")
RefAfFile = "RefMAFs.txt"
SNPnum=1e4
if(is.null(OutputFile))
stop("Argument of 'OutputFile' is required to store information for the follow-up analysis.")
# check if there are c("Indicator", "SampleID") in PhenoData-------------------
if(!is.null(control$IndicatorColumn))
{
if(!control$IndicatorColumn %in% colnames(PhenoData))
stop(paste0("Cannot find a column of '",
control$IndicatorColumn,
"' (i.e. control$IndicatorColumn) in colnames(PhenoData)"))
posCol = which(colnames(PhenoData) == control$IndicatorColumn)
colnames(PhenoData)[posCol] = "Indicator"
}
if(!is.null(control$SampleIDColumn))
{
if(!control$SampleIDColumn %in% colnames(PhenoData))
stop(paste0("Cannot find a column of '",
control$IndicatorColumn,
"' (i.e. control$SampleIDColumn) in colnames(PhenoData)"))
posCol = which(colnames(PhenoData) == control$SampleIDColumn)
colnames(PhenoData)[posCol] = "SampleID"
}
if(!"Indicator" %in% colnames(PhenoData))
stop("The column of 'Indicator' is required in PhenoData!")
if(any(!unique(PhenoData$Indicator) %in% c(0,1,NA)))
stop("The value of Indicator should be 0,1 or NA")
if(!"SampleID" %in% colnames(PhenoData))
stop("The column of 'SampleID' is required in PhenoData!")
if(!is.null(GRM)){
if(nrow(GRM)!=nrow(PhenoData) | ncol(GRM)!=nrow(PhenoData)){
stop(paste0("The dimension of the GRM should be ",nrow(PhenoData)," Ã— ",nrow(PhenoData)))
}
}
GRM=NULL
GRM=diag(1,2000)
if(is.null(OutputFile))
stop("Argument of 'OutputFile' is required to store information for the follow-up analysis.")
# check if there are c("Indicator", "SampleID") in PhenoData-------------------
if(!is.null(control$IndicatorColumn))
{
if(!control$IndicatorColumn %in% colnames(PhenoData))
stop(paste0("Cannot find a column of '",
control$IndicatorColumn,
"' (i.e. control$IndicatorColumn) in colnames(PhenoData)"))
posCol = which(colnames(PhenoData) == control$IndicatorColumn)
colnames(PhenoData)[posCol] = "Indicator"
}
PhenoData = read.table(system.file("WtSPAG", "simuPHENO_WtSPAG.txt", package = "GRAB"), header = T)
head(PhenoData )
if(is.null(OutputFile))
stop("Argument of 'OutputFile' is required to store information for the follow-up analysis.")
# check if there are c("Indicator", "SampleID") in PhenoData-------------------
if(!is.null(control$IndicatorColumn))
{
if(!control$IndicatorColumn %in% colnames(PhenoData))
stop(paste0("Cannot find a column of '",
control$IndicatorColumn,
"' (i.e. control$IndicatorColumn) in colnames(PhenoData)"))
posCol = which(colnames(PhenoData) == control$IndicatorColumn)
colnames(PhenoData)[posCol] = "Indicator"
}
if(!is.null(control$SampleIDColumn))
{
if(!control$SampleIDColumn %in% colnames(PhenoData))
stop(paste0("Cannot find a column of '",
control$IndicatorColumn,
"' (i.e. control$SampleIDColumn) in colnames(PhenoData)"))
posCol = which(colnames(PhenoData) == control$SampleIDColumn)
colnames(PhenoData)[posCol] = "SampleID"
}
if(!"Indicator" %in% colnames(PhenoData))
stop("The column of 'Indicator' is required in PhenoData!")
if(any(!unique(PhenoData$Indicator) %in% c(0,1,NA)))
stop("The value of Indicator should be 0,1 or NA")
if(!"SampleID" %in% colnames(PhenoData))
stop("The column of 'SampleID' is required in PhenoData!")
if(!is.null(GRM)){
if(nrow(GRM)!=nrow(PhenoData) | ncol(GRM)!=nrow(PhenoData)){
stop(paste0("The dimension of the GRM should be ",nrow(PhenoData)," Ã— ",nrow(PhenoData)))
}
}
#step1: quality control--------------------------------------------------------
suppressPackageStartupMessages(library("GRAB",quietly = T))
suppressPackageStartupMessages(library("data.table",quietly = T))
suppressPackageStartupMessages(library("dplyr",quietly = T))
suppressPackageStartupMessages(library("mvtnorm",quietly = T))
## reference genoInfo----------------------------------------------------------
refGenoInfo = fread(RefAfFile)%>%as_tibble()
# check if there are 7 columns in RefAfFile
for(colname in c("CHROM", "POS", "ID", "REF", "ALT", "AF_ref","AN_ref")){
if(!colname %in% colnames(refGenoInfo)){
stop( paste0(colname, " is missing in RefAfFile!") )}
}
## merge sample genoInfo and ref genoInfo--------------------------------------
GenoInfo.ctrl = GRAB.getGenoInfo(GenoFile = GenoFile
,GenoFileIndex = GenoFileIndex
,SampleIDs = with(PhenoData,SampleID[Indicator==0]) # MAF in cases
,control = control) %>%
rename(mu0 = altFreq, mr0 = missingRate ) %>%
select(mu0, mr0)
suppressPackageStartupMessages(library("GRAB",quietly = T))
suppressPackageStartupMessages(library("data.table",quietly = T))
suppressPackageStartupMessages(library("dplyr",quietly = T))
suppressPackageStartupMessages(library("mvtnorm",quietly = T))
GenoInfo.ctrl = GRAB.getGenoInfo(GenoFile = GenoFile
,GenoFileIndex = GenoFileIndex
,SampleIDs = with(PhenoData,SampleID[Indicator==0]) # MAF in cases
,control = control) %>%
rename(mu0 = altFreq, mr0 = missingRate ) %>%
select(mu0, mr0)
?GRAB.getGenoInfo
GRAB.getGenoInfo
?GRAB.getGenoInfo
GenoInfo.ctrl = GRAB::GRAB.getGenoInfo(GenoFile = GenoFile
,GenoFileIndex = GenoFileIndex
,SampleIDs = with(PhenoData,SampleID[Indicator==0]) # MAF in cases
,control = control) %>%
rename(mu0 = altFreq, mr0 = missingRate ) %>%
select(mu0, mr0)
