n1
head(PhenoData)
obj
sum(obj$PhenoData$Indicator)
obj$PhenoData$Indicator
obj$PhenoData
allQcResults
QcInfo = lapply(allQcResults, function(obj){
n1 = sum(obj$PhenoData$Indicator)
n0 = sum(1 - obj$PhenoData$Indicator)
AllelOrder = obj$control$AlleleOrder
return(cbind(n1,n0,AllelOrder))
}) %>% do.call("rbind" ,.) %>%
as_tibble() %>%
setNames(c("n1","n0","AllelOrder"))
QcInfo
if(length(unique(QcInfo$n1))!=1 | length(unique(QcInfo$n0))!=1){
stop("PhenoData in QCforBatchEffect is consistent!")
}
if(length(unique(QcInfo$AllelOrder ))!=1 ){
stop("AllelOrder in QCforBatchEffect is consistent!")
}
length(allQcResults[[1]]$count$Freq)
allQcResults[[1]]
mergeGenoInfo=mergeGenoInfo%>%
mutate(  n1=sum(PhenoData$Indicator)*(1-mr1)
n0=sum(1-PhenoData$Indicator)*(1-mr0) )
mergeGenoInfo=mergeGenoInfo%>%
mutate(  n1=sum(PhenoData$Indicator)*(1-mr1),
n0=sum(1-PhenoData$Indicator)*(1-mr0) )
head(mergeGenoInfo)
pvalue_bat = lapply(1: nrow(mergeGenoInfo), function(ind){
p.test = Batcheffect.Test(n0 = mergeGenoInfo$n0[ind],
n1 = mergeGenoInfo$n1[ind],
n.ext = mergeGenoInfo$AN_ref[ind]/2,
maf0 = mergeGenoInfo$mu0[ind],
maf1 = mergeGenoInfo$mu1[ind] ,
maf.ext = mergeGenoInfo$AF_ref[ind],
pop.prev = RefPrevalence)
})%>%unlist()
library(GRAB)
est_param
library(GRAB)
GenoFile = "simuBGEN1.bgen"
GenoFileIndex = c("simuBGEN1.bgen.bgi",
"simuBGEN1.sample")
OutputFile = "qcBGEN1.txt"
PhenoData
control=list(AlleleOrder = "ref-first",
AllMarkers = T,
IndicatorColumn = "SurvEvent", SampleIDColumn = "IID")
RefAfFile = "RefMAFs.txt"
RefPrevalence = RefPrevalence
if(is.null(OutputFile))
stop("Argument of 'OutputFile' is required to store information for the follow-up analysis.")
# check if there are c("Indicator", "SampleID") in PhenoData-------------------
if(!is.null(control$IndicatorColumn))
{
if(!control$IndicatorColumn %in% colnames(PhenoData))
stop(paste0("Cannot find a column of '",
control$IndicatorColumn,
"' (i.e. control$IndicatorColumn) in colnames(PhenoData)"))
posCol = which(colnames(PhenoData) == control$IndicatorColumn)
colnames(PhenoData)[posCol] = "Indicator"
}
if(!is.null(control$SampleIDColumn))
{
if(!control$SampleIDColumn %in% colnames(PhenoData))
stop(paste0("Cannot find a column of '",
control$IndicatorColumn,
"' (i.e. control$SampleIDColumn) in colnames(PhenoData)"))
posCol = which(colnames(PhenoData) == control$SampleIDColumn)
colnames(PhenoData)[posCol] = "SampleID"
}
if(!"Indicator" %in% colnames(PhenoData))
stop("The column of 'Indicator' is required in PhenoData!")
if(any(!unique(PhenoData$Indicator) %in% c(0,1,NA)))
stop("The value of Indicator should be 0,1 or NA")
if(!"SampleID" %in% colnames(PhenoData))
stop("The column of 'SampleID' is required in PhenoData!")
#step1: quality control--------------------------------------------------------
suppressPackageStartupMessages(library("GRAB",quietly = T))
suppressPackageStartupMessages(library("data.table",quietly = T))
suppressPackageStartupMessages(library("dplyr",quietly = T))
## reference genoInfo----------------------------------------------------------
refGenoInfo = fread(RefAfFile)%>%as_tibble()
getwd()=='D:/Github/GRAB'
setwd('D:/Github/GRAB')
#step1: quality control--------------------------------------------------------
suppressPackageStartupMessages(library("GRAB",quietly = T))
suppressPackageStartupMessages(library("data.table",quietly = T))
suppressPackageStartupMessages(library("dplyr",quietly = T))
## reference genoInfo----------------------------------------------------------
refGenoInfo = fread(RefAfFile)%>%as_tibble()
setwd("D:/Github/GRAB/inst/WtSPAG")
#step1: quality control--------------------------------------------------------
suppressPackageStartupMessages(library("GRAB",quietly = T))
suppressPackageStartupMessages(library("data.table",quietly = T))
suppressPackageStartupMessages(library("dplyr",quietly = T))
## reference genoInfo----------------------------------------------------------
refGenoInfo = fread(RefAfFile)%>%as_tibble()
# check if there are 7 columns in RefAfFile
for(colname in c("CHROM", "POS", "ID", "REF", "ALT", "AF_ref","AN_ref")){
if(!colname %in% colnames(refGenoInfo)){
stop( paste0(colname, " is missing in RefAfFile!") )}
}
## merge sample genoInfo and ref genoInfo--------------------------------------
GenoInfo.ctrl = GRAB.getGenoInfo(GenoFile = GenoFile
,GenoFileIndex = GenoFileIndex
,SampleIDs = with(PhenoData,SampleID[Indicator==0]) # MAF in cases
,control = control) %>%
rename(mu0 = altFreq, mr0 = missingRate ) %>%
select(mu0, mr0)
GenoInfo = GRAB.getGenoInfo(GenoFile = GenoFile
,GenoFileIndex = GenoFileIndex
,SampleIDs = with(PhenoData,SampleID[Indicator==1]) # MAF in controls
,control = control) %>%
rename(mu1 = altFreq, mr1 = missingRate) %>%
cbind(., GenoInfo.ctrl) %>% as_tibble() %>%
mutate(RA = ifelse(REF < ALT, paste0(REF, ALT), paste0(ALT, REF))) %>%
mutate(index = 1:n())
mergeGenoInfo = refGenoInfo %>%
mutate(RA = ifelse(REF < ALT, paste0(REF, ALT), paste0(ALT, REF))) %>%
merge(., GenoInfo, by=c("CHROM", "POS", "RA"), all.y=T) %>%
rename(REF = REF.y, ALT = ALT.y, ID = ID.y)%>%
mutate(AF_ref = ifelse(REF == REF.x, AF_ref, 1-AF_ref  ))%>%
select(-REF.x, -ALT.x, -ID.x, -RA) %>%
arrange( index )%>%
select( -index )%>%
mutate( n1=sum(PhenoData$Indicator) * (1 - mr1),
n0=sum(1 - PhenoData$Indicator) * (1 - mr0) )
####calculate batch effect p-value for each genetic variant------------------------------------
pvalue_bat = lapply(1: nrow(mergeGenoInfo), function(ind){
p.test = Batcheffect.Test(n0 = mergeGenoInfo$n0[ind],
n1 = mergeGenoInfo$n1[ind],
n.ext = mergeGenoInfo$AN_ref[ind]/2,
maf0 = mergeGenoInfo$mu0[ind],
maf1 = mergeGenoInfo$mu1[ind] ,
maf.ext = mergeGenoInfo$AF_ref[ind],
pop.prev = RefPrevalence)
})%>%unlist()
mergeGenoInfo = mergeGenoInfo %>% mutate(pvalue_bat)
head(mergeGenoInfo )
summary(mergeGenoInfo$mu1)
summary(mergeGenoInfo$mu0)
mergeGenoInfo = mergeGenoInfo %>% mutate(mu.int = (mu0 + mu1)/2,
mu.int = ifelse(mu.int > 0.5, 1 - mu.int, mu.int))
summary(mergeGenoInfo$mu.int)
head(mergeGenoInfo )
tail(mergeGenoInfo %>% arrange(mu.int))
i=1
data.ref = mergeGenoInfo %>% filter(mu.int >= max(maf.group[i]-0.1,0) & mu.int < min(1,maf.group[i+1]+0.1) )
maf.group = c(seq(0, 0.4, 0.01),max(mergeGenoInfo$mu.int))
data.ref = mergeGenoInfo %>% filter(mu.int >= max(maf.group[i]-0.1,0) & mu.int < min(1,maf.group[i+1]+0.1) )
maf.group
data.ref = mergeGenoInfo %>% filter(mu.int >= max(maf.group[i]-0.1,0) & mu.int < min(1,maf.group[i+1]+0.1) )
data = mergeGenoInfo %>% filter(mu.int > maf.group[i] & mu.int <= maf.group[i+1] )
mu = (maf.group[i]+maf.group[i+1])/2
mu
dim(data)
dim(data.ref)
head(PhenoData)
mergeGenoInfo = mergeGenoInfo %>% mutate(mu.int = (mu0 + mu1)/2,
mu.int = ifelse(mu.int > 0.5, 1 - mu.int, mu.int),
er = mean(Indicator),
weight = ifelse(Indicator==1, 1, (1-RefPrevalence)/RefPrevalence))
PhenoData = PhenoData %>%
mutate(er = mean(PhenoData$Indicator),
weight = ifelse(Indicator==1, 1, (1-RefPrevalence)/RefPrevalence)/((1-er)/er) ) %>%select(-er)
head(PhenoData)
tail(PhenoData)
fitNullModel.WtSPAG
?fitNullModel.WtSPAG
obj.WtSPAG = GRAB.NullModel(Surv(SurvTime, SurvEvent) ~ Cov1 + Cov2,
data = PhenoData,
subjData = IID,
method = "WtSPAG",
traitType = "time-to-event",
control = list(RefPrevalence = RefPrevalence))
head(PhenoData)
obj.WtSPAG = GRAB.NullModel(Surv(SurvTime, Indicator) ~ Cov1 + Cov2,
data = PhenoData,
subjData = IID,
method = "WtSPAG",
traitType = "time-to-event",
control = list(RefPrevalence = RefPrevalence))
obj.WtSPAG = GRAB.NullModel(Surv(SurvTime, Indicator) ~ Cov1 + Cov2,
data = PhenoData,
subjData = SampleID,
method = "WtSPAG",
traitType = "time-to-event",
control = list(RefPrevalence = RefPrevalence))
obj.WtSPAG
summary(obj.WtSPAG$weight)
table(obj.WtSPAG$weight)
obj.WtSPAG
obj.WtSPAG = GRAB.NullModel(Surv(SurvTime, Indicator) ~ Cov1 + Cov2,
data = PhenoData,
subjData = SampleID,
method = "WtSPAG",
traitType = "time-to-event",
control = list(RefPrevalence = RefPrevalence))
PhenoData = PhenoData %>%
mutate(R = obj.WtSPAG$mresid,
weight = obj.WtSPAG$weight)
head(PhenoData )
w1 = PhenoData$weight/(2*sum(PhenoData$weight))
head(data.ref)
n.ext = data$AN_ref[1]/2
n.ext
maf.group
summary(mergeGenoInfo$mu.int)
maf.group = c(seq(0, 0.4, 0.05),max(mergeGenoInfo$mu.int))
data.ref = mergeGenoInfo %>% filter(mu.int >= max(maf.group[i]-0.1,0) & mu.int < min(1,maf.group[i+1]+0.1) )
data = mergeGenoInfo %>% filter(mu.int > maf.group[i] & mu.int <= maf.group[i+1] )
data
data.ref
maf.group
n.ext = data$AN_ref[1]/2
var_mu_ext = mu*(1-mu)/(2*n.ext)
var_Sbat = ifelse(GRM==1, sum(w1^2)*2*mu*(1-mu) + var_mu_ext,
t(vec_weight) %*% GRM %*% vec_weight + var_mu_ext)
n.ext
data
na.omit(data$AN_ref)[1]/2
mean(na.omit(data$AN_ref)[1])/2
var_mu_ext = mu*(1-mu)/(2*n.ext)
var_mu_ext
n.ext = mean(na.omit(data$AN_ref)[1])/2
var_mu_ext = mu*(1-mu)/(2*n.ext)
GRM=1
var_Sbat = ifelse(GRM==1, sum(w1^2)*2*mu*(1-mu) + var_mu_ext,
t(vec_weight) %*% GRM %*% vec_weight + var_mu_ext)
var_Sbat
obj=est_param(vec_p_bat=data.ref$pvalue_bat ,
vec_var_Sbat=var_Sbat)
obj
b = optim(par = 0.5, method = "L-BFGS-B"
, lower = 0, upper = 1
, fn = S.root
, prev = RefPrevalence
, y = PhenoData$Indicator
, R = PhenoData$R
, w = PhenoData$weight
, mu = mu
, N = nrow(PhenoData)
, n.ext = n.ext
, sigma2 = obj$sigma2
, TPR = obj$TPR
)$par[1]
RefPrevalence
S.root
b = optim(par = 0.5, method = "L-BFGS-B"
, lower = 0, upper = 1
, fn = S.root
, pop.prev = RefPrevalence
, y = PhenoData$Indicator
, R = PhenoData$R
, w = PhenoData$weight
, mu = mu
, N = nrow(PhenoData)
, n.ext = n.ext
, sigma2 = obj$sigma2
, TPR = obj$TPR
)$par[1]
library(KScorrect)
b = optim(par = 0.5, method = "L-BFGS-B"
, lower = 0, upper = 1
, fn = S.root
, pop.prev = RefPrevalence
, y = PhenoData$Indicator
, R = PhenoData$R
, w = PhenoData$weight
, mu = mu
, N = nrow(PhenoData)
, n.ext = n.ext
, sigma2 = obj$sigma2
, TPR = obj$TPR
)$par[1]
??pmvnorm
library(mvtnorm)
b = optim(par = 0.5, method = "L-BFGS-B"
, lower = 0, upper = 1
, fn = S.root
, pop.prev = RefPrevalence
, y = PhenoData$Indicator
, R = PhenoData$R
, w = PhenoData$weight
, mu = mu
, N = nrow(PhenoData)
, n.ext = n.ext
, sigma2 = obj$sigma2
, TPR = obj$TPR
)$par[1]
b
suppressPackageStartupMessages(library("mvtnorm",quietly = T))
obj
TPR = obj[1]
sigma2 = obj[2]
b = optim(par = 0.5, method = "L-BFGS-B", lower = 0, upper = 1
, fn = S.root
, pop.prev = RefPrevalence
, y = PhenoData$Indicator
, R = PhenoData$R
, w = PhenoData$weight
, mu = mu
, N = nrow(PhenoData)
, n.ext = n.ext
, sigma2 = obj$sigma2
, TPR = obj$TPR
)$par[1]
data=data%>%cbind(.,TPR, sigma2, b=b)
head(data)
mergeGenoInfo = mergeGenoInfo %>% mutate(mu.int = (mu0 + mu1)/2,
mu.int = ifelse(mu.int > 0.5, 1 - mu.int, mu.int),
index = 1:n())
mergeGenoInfo =lapply(1:(length(maf.group)-1), function(i){
cat(i,"\n")
##assume that genotypes with MAF in [ maf.group[i] , maf.group[i+1]] have the same mixture distribution
data = mergeGenoInfo %>% filter(mu.int > maf.group[i] & mu.int <= maf.group[i+1] )
##using batcheffect p-values with MAF in [maf.group[i]-0.1 , maf.group[i+1]+0.1] to estimate parameters
data.ref = mergeGenoInfo %>%
filter(mu.int >= max(maf.group[i]-0.1,0) & mu.int < min(1,maf.group[i+1]+0.1) )
mu = (maf.group[i]+maf.group[i+1])/2
w1 = PhenoData$weight/(2*sum(PhenoData$weight))
n.ext = mean(na.omit(data$AN_ref)[1])/2
var_mu_ext = mu*(1-mu)/(2*n.ext)
var_Sbat = ifelse(GRM==1, sum(w1^2)*2*mu*(1-mu) + var_mu_ext,
t(vec_weight) %*% GRM %*% vec_weight + var_mu_ext)
obj = est_param(vec_p_bat=data.ref$pvalue_bat ,
vec_var_Sbat=var_Sbat)
TPR = obj[1]
sigma2 = obj[2]
w.ext = optim(par = 0.5, method = "L-BFGS-B", lower = 0, upper = 1
, fn = S.root
, pop.prev = RefPrevalence
, y = PhenoData$Indicator
, R = PhenoData$R
, w = PhenoData$weight
, mu = mu
, N = nrow(PhenoData)
, n.ext = n.ext
, sigma2 = obj$sigma2
, TPR = obj$TPR
)$par[1]
data=data%>%cbind(.,TPR, sigma2, w.ext)
})%>%
do.call("rbind",.)%>%as_tibble()%>%arrange(index)
head(mergeGenoInfo)
tail(mergeGenoInfo)
maf.group = c(seq(0, 0.4, 0.01),max(mergeGenoInfo$mu.int))
if(nrow(GenoInfo.ctrl)<SNPnum)
stop("The number of genetic variants <",SNPnum)
SNPnum=1e5
if(nrow(GenoInfo.ctrl)<SNPnum)
stop("The number of genetic variants <",SNPnum)
fun.est.param = function(vec_p_bat,
vec_var_Sbat,
vec_cutoff=seq(0.01,0.4,0.1)
){
########  step1: the propportion of p_bat>cutoff
vec_p_deno=lapply(vec_cutoff,function(p_cut){
p_deno=mean(na.omit(vec_p_bat>p_cut))
})%>%unlist()
######## optimization function
opti_fun = function( var_Sbat,vec_p_deno,par ){
diff=lapply(1: length(vec_cutoff),function(j){
p_cut=vec_cutoff[j]
lb = -qnorm(1-p_cut/2) * sqrt(var_Sbat)
ub = qnorm(1-p_cut/2) *sqrt(var_Sbat)
p_deno=vec_p_deno[j]
c = pnorm(ub, 0, sqrt(var_Sbat+par[2]), log.p = T)
d = pnorm(lb, 0, sqrt(var_Sbat+par[2]), log.p = T)
pro.cut = par[1]*( exp(d) * (exp(c-d) - 1) )+(1-par[1])*(1-p_cut)
t = ((p_deno - pro.cut)/p_deno)^2
})%>%do.call("sum",.)
return(diff)
}
#######estimate TPR and sigma2 for each SNP
var.diff = lapply(1:length(vec_var_Sbat), function(i){
if(i%%100==0)cat(i,"\n")
obj = optim(par = c(0.01, 0.01)
#,method = "SANN"
#, lower = 0, upper = 1
, fn = opti_fun,
vec_p_deno=vec_p_deno,
var_Sbat=vec_var_Sbat[i])
TPR = min(1,max(0,obj$par[1]))
sigma2 = min(1,max(0,obj$par[2]))
return(cbind(TPR, sigma2))
})%>%
do.call("rbind",.)%>%as_tibble()
return(var.diff)
}
###### optimal weight for mu_ext -----------------------------------------------
fun.optimalWeight = function(par, pop.prev, R, y, mu1, w , mu, N, n.ext, sigma2, TPR){
b=par[1]
p.fun= function(b,pop.prev, R, y, mu1, mu, w, N, n.ext, sigma2, TPR){
meanR= mean(R)
sumR = sum(R)
mu0 = mu
mu.pop = mu1*pop.prev+mu0*(1-pop.prev)
mu.i = ifelse(y==1, 2*mu1, 2*mu0)
S = sum((R-(1-b)*meanR)*mu.i)-sumR*2*b*mu.pop
w1 = w/(2*sum(w))
mu = mean(mu.i)/2
var_mu_ext = mu*(1-mu)/(2*n.ext)
var_Sbat = sum(w1^2)*2*mu*(1-mu) + var_mu_ext
p_cut=0.1
lb = -qnorm(1-p_cut/2) * sqrt(var_Sbat)
ub = qnorm(1-p_cut/2) *sqrt(var_Sbat)
c = pnorm(ub, 0, sqrt(var_Sbat+sigma2),log.p = T)
d = pnorm(lb, 0, sqrt(var_Sbat+sigma2),log.p = T)
p_deno = TPR*( exp(d) * (exp(c-d) - 1) )+(1-TPR)*(1-p_cut)
##sigma2=0
var.int = sum((R-(1-b)*meanR)^2)*2*mu*(1-mu)
var_S = var.int +  4*b^2 *sumR^2* var_mu_ext
cov_Sbat_S = sum(w1*(R-(1-b)*meanR))*2*mu*(1-mu)+2*b*sumR*var_mu_ext
VAR = matrix(c(var_S, cov_Sbat_S, cov_Sbat_S, var_Sbat),nrow=2)
p0 = max(0,pmvnorm(lower=c( -Inf, lb),upper=c( -abs(S), ub), mean=c(0,0), sigma=VAR))
##sigma2!=0
var_S1 = var.int +  4*b^2 *sumR^2* (var_mu_ext+sigma2)
cov_Sbat_S1 = sum(w1*(R-(1-b)*meanR))*2*mu*(1-mu)+2*b*sumR*(var_mu_ext+sigma2)
var_Sbat1 = var_Sbat+sigma2
VAR1 = matrix(c(var_S1, cov_Sbat_S1, cov_Sbat_S1, var_Sbat1),nrow=2)
p1=max(0,pmvnorm(lower=c( -Inf, lb),upper=c( -abs(S), ub), mean=c(0,0), sigma=VAR1))
p.con = 2*(TPR*p1+(1-TPR)*p0)/p_deno
#diff = -log10(p.con)+log10(5e-8)
diff = -log10(p.con/5e-8)
return(diff)
}
mu1=uniroot(p.fun, lower=mu,upper=1
, b=b, pop.prev=pop.prev,mu=mu,
R=R, y=y, w=w,N=N, n.ext=n.ext,sigma2=sigma2,TPR=TPR)$root
return(mu1)
}
cat("estimate TPR and sigma2--------------\n")
maf.group = c(seq(0, 0.4, 0.05),max(mergeGenoInfo$mu.int))
mergeGenoInfo =lapply(1:(length(maf.group)-1), function(i){
cat(i,"\n")
##assume that genotypes with MAF in [ maf.group[i] , maf.group[i+1]] have the same mixture distribution
data = mergeGenoInfo %>% filter(mu.int > maf.group[i] & mu.int <= maf.group[i+1] )
##using batcheffect p-values with MAF in [maf.group[i]-0.1 , maf.group[i+1]+0.1] to estimate parameters
data.ref = mergeGenoInfo %>%
filter(mu.int >= max(maf.group[i]-0.1,0) & mu.int < min(1,maf.group[i+1]+0.1) )
mu = (maf.group[i]+maf.group[i+1])/2
w1 = PhenoData$weight/(2*sum(PhenoData$weight))
n.ext = mean(na.omit(data$AN_ref)[1])/2
var_mu_ext = mu*(1-mu)/(2*n.ext)
var_Sbat = ifelse(GRM==1, sum(w1^2)*2*mu*(1-mu) + var_mu_ext,
t(vec_weight) %*% GRM %*% vec_weight + var_mu_ext)
obj = fun.est.param(vec_p_bat=data.ref$pvalue_bat ,
vec_var_Sbat=var_Sbat)
TPR = obj[1]
sigma2 = obj[2]
w.ext = optim(par = 0.5, method = "L-BFGS-B", lower = 0, upper = 1
, fn = fun.optimalWeight
, pop.prev = RefPrevalence
, y = PhenoData$Indicator
, R = PhenoData$R
, w = PhenoData$weight
, mu = mu
, N = nrow(PhenoData)
, n.ext = n.ext
, sigma2 = obj$sigma2
, TPR = obj$TPR
)$par[1]
data=data%>%cbind(.,TPR, sigma2, w.ext)
})%>%
do.call("rbind",.) %>%
as_tibble() %>%
arrange(index) %>%
select(-index)
head(mergeGenoInfo)
mergeGenoInfo=mergeGenoInfo%>%select(-TPR, -sigma2, -w.ext)
cat("estimate TPR and sigma2--------------\n")
maf.group = c(seq(0, 0.4, 0.05),max(mergeGenoInfo$mu.int))
mergeGenoInfo =lapply(1:(length(maf.group)-1), function(i){
cat(i,"\n")
##assume that genotypes with MAF in [ maf.group[i] , maf.group[i+1]] have the same mixture distribution
data = mergeGenoInfo %>% filter(mu.int > maf.group[i] & mu.int <= maf.group[i+1] )
##using batcheffect p-values with MAF in [maf.group[i]-0.1 , maf.group[i+1]+0.1] to estimate parameters
data.ref = mergeGenoInfo %>%
filter(mu.int >= max(maf.group[i]-0.1,0) & mu.int < min(1,maf.group[i+1]+0.1) )
mu = (maf.group[i]+maf.group[i+1])/2
w1 = PhenoData$weight/(2*sum(PhenoData$weight))
n.ext = mean(na.omit(data$AN_ref)[1])/2
var_mu_ext = mu*(1-mu)/(2*n.ext)
var_Sbat = ifelse(GRM==1, sum(w1^2)*2*mu*(1-mu) + var_mu_ext,
t(vec_weight) %*% GRM %*% vec_weight + var_mu_ext)
obj = fun.est.param(vec_p_bat=data.ref$pvalue_bat ,
vec_var_Sbat=var_Sbat)
TPR = obj[1]
sigma2 = obj[2]
w.ext = optim(par = 0.5, method = "L-BFGS-B", lower = 0, upper = 1
, fn = fun.optimalWeight
, pop.prev = RefPrevalence
, y = PhenoData$Indicator
, R = PhenoData$R
, w = PhenoData$weight
, mu = mu
, N = nrow(PhenoData)
, n.ext = n.ext
, sigma2 = obj$sigma2
, TPR = obj$TPR
)$par[1]
data=data%>%cbind(.,TPR, sigma2, w.ext)
})%>%
do.call("rbind",.) %>%
as_tibble() %>%
arrange(index) %>%
select(-index)
